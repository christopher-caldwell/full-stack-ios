service: api

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
	iamRoleStatements:
		- Effect: Allow
			Principal:
				Service:
					- lambda.amazonaws.com
			Action: 'sts:AssumeRole'
		- Effect: Allow
			Action:
				- xray:PutTraceSegments
			Resource: '*'
		- Effect: Allow
			Action:
				- logs:CreateLogGroup
				- logs:CreateLogStream
				- logs:PutLogEvents
			Resource: '*'
  tracing:
    apiGateway: false
    lambda: true
  environment:
   STAGE: ${env:STAGE}

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: 'webpack.${env:WEBPACK_CONFIG}.js'
    packager: 'yarn'

functions:
  Login:
    handler: src/user/login/standard/index.handler
    name: Login-${env:STAGE}
    description: Login with username and password
    role: LoginUserRole
   events:
     - http:
         path: user/login
         method: post
   environment:
     variable2: value2

# you can add CloudFormation resource templates here
resources:
  Description: Full stack iOS API
  Resources:
# IAM
    SecretsAccessPolicy:
			Type: AWS::IAM::Policy
			Properties: 
				PolicyName: secrets-manager-access
				PolicyDocument:
				Version: 2012-10-17
				Statement:
						Effect: Allow
						- Action:
							- secretsmanager:GetSecretValue
						Resource:
							Fn::Join:
							- ''
							- - 'arn:aws:secretsmanager:'
								- !Ref AWS::Region
								- ':'
								- !Ref AWS::AccountId
								- :secret/
								- ${env:SECRET_NAME}

		LoginUserRole:
			DependsOn: SecretsAccessPolicy
			Type: AWS::IAM::Role
			Properties:
				Policies:
				- !Ref SecretsAccessPolicy
				- PolicyName: GetItem
					PolicyDocument:
						Version: '2012-10-17'
						Statement:	
						- Action:
							- dynamodb:GetItem
							Effect: Allow
							Resource: !GetAtt Db.arn
		
		RegisterUserRole:
			DependsOn: SecretsAccessPolicy
			Properties:
				Policies:
				- !Ref SecretsAccessPolicy
				- PolicyName: PutItem
					PolicyDocument:
						Version: '2012-10-17'
						Statement:
						- Action:
							- dynamodb:PutItem
							Effect: Allow
							Resource: !GetAtt Db.arn
# DynamoDB
    Db:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:STAGE}-${env:TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: ${env:TABLE_PARTITION_KEY}
            AttributeType: S
          - AttributeName: ${env:TABLE_RANGE_KEY}
            AttributeType: S
        KeySchema:
          - AttributeName: ${env:TABLE_PARTITION_KEY}
            KeyType: HASH
          - AttributeName: ${env:TABLE_RANGE_KEY}
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
